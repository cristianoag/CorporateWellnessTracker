@page "/breaks"
@using CorporateWellness.Components;
@using CorporateWellness.Models;
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Globalization
@using Microsoft.FluentUI.AspNetCore.Components



<link href="/css/BlazorCalendar.css" rel="stylesheet" />

<h3>Breaks</h3>

<FluentGrid Style="background-color: var(--neutral-layer-3); padding: 4px; ">
	<FluentGridItem xs="12" Justify="JustifyContent.FlexEnd">

		<FluentButton @onclick="GoToday">📅 Go Today</FluentButton>
		<FluentButton @onclick="@(m => ClicMonthNavigate(-7))" class="btn">🔼</FluentButton>
		<FluentButton @onclick="@(m => ClicMonthNavigate(7))" class="btn me-2">🔽</FluentButton>
		<input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
		<FluentButton >Calendar Sync</FluentButton>

		@*	<select @bind="@PriorityDisplay" class="me-2">
			<option value="@PriorityLabel.Code" selected>priority Code</option>
			<option value="@PriorityLabel.Caption">priority Caption</option>
		</select>
 		<div>
			<input type="checkbox" @bind="draggable" id="is-draggable" />
			<label for="is-draggable">Draggable</label>
		</div> *@
	</FluentGridItem>
<FluentGridItem xs="12">

<CalendarContainer FirstDate="@today"
				   TasksList="TasksList.ToArray()"
				   DisplayedView="DisplayedView.Weekly">
	<WeekView PriorityDisplay="@PriorityDisplay"
			  OutsideCurrentMonthClick="OutsideCurrentMonthClick"
			  TaskClick="TaskClick"
			  DayClick="DayClick"
			  Draggable="@draggable"
			  DragStart="DragStart"
			  DropTask="DropTask"
			  HighlightToday="true" />
</CalendarContainer>
	</FluentGridItem>
</FluentGrid>

<br />
<div class="console">@fakeConsole</div>

@code {
	private DateTime today = DateTime.Today;
	private int months = 12;
	private List<Tasks> TasksList;
	private string fakeConsole = "";
	private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code;
	private bool draggable = true;

	protected override void OnInitialized()
	{
		//CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("dz-DZ");
		//CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");

		TasksList = new()
		{
			//new Tasks { ID = 0, DateStart = today.AddDays(1), DateEnd = today.AddDays(2), Code = "HELLO", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
			
			new Tasks { ID = 12, DateStart = today.AddDays(00).AddHours(08), DateEnd = today.AddDays(00).AddHours(08).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 13, DateStart = today.AddDays(00).AddHours(10), DateEnd = today.AddDays(00).AddHours(10).AddMinutes(10), Code = "Office chair yoga", Color = "#FFC3FF", Caption = "Desk stretching routine" } ,
			//new Tasks { ID = 14, DateStart = today.AddDays(00).AddHours(12), DateEnd = today.AddDays(00).AddHours(12).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 15, DateStart = today.AddDays(00).AddHours(14), DateEnd = today.AddDays(00).AddHours(14).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 16, DateStart = today.AddDays(00).AddHours(16), DateEnd = today.AddDays(00).AddHours(16).AddMinutes(10), Code = "Stair climbing", Color = "#0d6efd", Caption = "Desk stretching routine" } ,

			new Tasks { ID = 18, DateStart = today.AddDays(01).AddHours(08), DateEnd = today.AddDays(01).AddHours(08).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 19, DateStart = today.AddDays(01).AddHours(10), DateEnd = today.AddDays(01).AddHours(10).AddMinutes(10), Code = "Office chair yoga", Color = "#FFC3FF", Caption = "Desk stretching routine" } ,
			//new Tasks { ID = 20, DateStart = today.AddDays(01).AddHours(12), DateEnd = today.AddDays(01).AddHours(12).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 21, DateStart = today.AddDays(01).AddHours(14), DateEnd = today.AddDays(01).AddHours(14).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 22, DateStart = today.AddDays(01).AddHours(16), DateEnd = today.AddDays(01).AddHours(16).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,

			new Tasks { ID = 24, DateStart = today.AddDays(02).AddHours(08), DateEnd = today.AddDays(02).AddHours(08).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 25, DateStart = today.AddDays(02).AddHours(10), DateEnd = today.AddDays(02).AddHours(10).AddMinutes(10), Code = "Office chair yoga", Color = "#FFC3FF", Caption = "Desk stretching routine" } ,
			//new Tasks { ID = 26, DateStart = today.AddDays(02).AddHours(12), DateEnd = today.AddDays(02).AddHours(12).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 27, DateStart = today.AddDays(02).AddHours(14), DateEnd = today.AddDays(02).AddHours(14).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 28, DateStart = today.AddDays(02).AddHours(16), DateEnd = today.AddDays(02).AddHours(16).AddMinutes(10), Code = "Stair climbing", Color = "#0d6efd", Caption = "Desk stretching routine" } ,

			new Tasks { ID = 30, DateStart = today.AddDays(03).AddHours(08), DateEnd = today.AddDays(03).AddHours(08).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 31, DateStart = today.AddDays(03).AddHours(10), DateEnd = today.AddDays(03).AddHours(10).AddMinutes(10), Code = "Office chair yoga", Color = "#FFC3FF", Caption = "Desk stretching routine" } ,
			//new Tasks { ID = 32, DateStart = today.AddDays(03).AddHours(12), DateEnd = today.AddDays(03).AddHours(12).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 33, DateStart = today.AddDays(03).AddHours(14), DateEnd = today.AddDays(03).AddHours(14).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 34, DateStart = today.AddDays(03).AddHours(16), DateEnd = today.AddDays(03).AddHours(16).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,

			new Tasks { ID = 36, DateStart = today.AddDays(04).AddHours(08), DateEnd = today.AddDays(04).AddHours(08).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 37, DateStart = today.AddDays(04).AddHours(10), DateEnd = today.AddDays(04).AddHours(10).AddMinutes(10), Code = "Office chair yoga", Color = "#FFC3FF", Caption = "Desk stretching routine" } ,
			//new Tasks { ID = 38, DateStart = today.AddDays(04).AddHours(12), DateEnd = today.AddDays(04).AddHours(12).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 39, DateStart = today.AddDays(04).AddHours(14), DateEnd = today.AddDays(04).AddHours(14).AddMinutes(10), Code = "Desk stretch", Color = "#19C319", Caption = "Desk stretching routine" } ,
			new Tasks { ID = 40, DateStart = today.AddDays(04).AddHours(16), DateEnd = today.AddDays(04).AddHours(16).AddMinutes(10), Code = "Stair climbing", Color = "#0d6efd", Caption = "Desk stretching routine" } ,


			new Tasks { ID = 41, DateStart = today.AddDays(0).AddHours(12), DateEnd = today.AddDays(0).AddHours(13), Code = "Walking break", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
			new Tasks { ID = 42, DateStart = today.AddDays(1).AddHours(12), DateEnd = today.AddDays(1).AddHours(13), Code = "Walking break", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
			new Tasks { ID = 43, DateStart = today.AddDays(2).AddHours(12), DateEnd = today.AddDays(2).AddHours(13), Code = "Walking break", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
			new Tasks { ID = 44, DateStart = today.AddDays(3).AddHours(12), DateEnd = today.AddDays(3).AddHours(13), Code = "Walking break", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
			new Tasks { ID = 45, DateStart = today.AddDays(4).AddHours(12), DateEnd = today.AddDays(4).AddHours(13), Code = "Walking break", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },

			//new Tasks { ID = 100, DateStart = today.AddHours(5), DateEnd = today.AddHours(10), Code = "CALL", Color = "#eb3c37", ForeColor = "#222", Caption = "Lorem ipsum dolor sit amet", FillStyle=FillStyleEnum.CrossDots },
			//new Tasks { ID = 101, DateStart = today.AddDays(31), DateEnd = today.AddDays(31), Code = "MTG", Color = "#19C319", Caption = "MTG:France" },
			//new Tasks { ID = 102, DateStart = today.AddDays(40), DateEnd = today.AddDays(42), Code = "DEV", Color = "#FFD800", Comment="on Teams template", Caption = "Fusce quis purus eu ante" },
			//new Tasks { ID = 103, DateStart = today.AddDays(32), DateEnd = today.AddDays(33), Code = "MEET", Color = "#0d6efd" },
			//new Tasks { ID = 104, DateStart = today.AddDays(32), DateEnd = today.AddDays(32), Code = "BLAZOR", Color = "#FFC3FF", Caption = "Blazor Dev" } ,
			//new Tasks { ID = 105, DateStart = today.AddDays(45).AddHours(8), DateEnd = today.AddDays(45).AddHours(9), Code = "MEETING", Color = "#2DD7D7", Comment="Julien's test" },
			//new Tasks { ID = 106, DateStart = today.AddDays(-8), DateEnd = today.AddDays(-7), Code = "MEET⭐", Color = "#0d6efd",Caption = "MTG:France" }
		};
	}

	private void ChangeFirstDate(string value)
	{
		if (string.IsNullOrEmpty(value)) return;
		today = DateTime.Parse(value.ToString());
	}

	private void GoToday()
	{
		today = DateTime.Today;
	}

	private void ClicMonthNavigate(int daysToAdd)
	{
		today = today.AddDays(daysToAdd);
	}

	private void OutsideCurrentMonthClick(int MonthAdded)
	{
		today = today.AddMonths(MonthAdded);
	}

	private void TaskClick(ClickTaskParameter clickTaskParameter)
	{
		fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
	}

	private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
	}

	private void DragStart(DragDropParameter dragDropParameter)
	{
		fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
	}

	private void DropTask(DragDropParameter dragDropParameter)
	{
		fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

		Tasks taskDropped = TasksList.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

		var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
		taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
		taskDropped.DateStart = dragDropParameter.Day;
	}
}
