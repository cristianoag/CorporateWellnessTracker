@page "/"
@page "/goals"
@using CorporateWellness.Components;
@using Microsoft.FluentUI.AspNetCore.Components
@inject IDialogService _dialogService
<FluentDialogProvider @rendermode="RenderMode.InteractiveServer" />


<FluentGrid Style="background-color: var(--neutral-layer-3); padding: 4px; ">
    <FluentGridItem xs="12" Justify="JustifyContent.FlexEnd">
        <FluentSearch AriaLabel="Search" />
        &nbsp;
        <FluentButton OnClick="@OpenDialogAsync">New Goal</FluentButton>
        &nbsp;
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())">Delete</FluentButton>
    </FluentGridItem>
    <FluentGridItem xs="12">
        <FluentDataGrid Items="@userGoals">
            <TemplateColumn Width="30px" Align="Align.Center">
                <input type="checkbox" @onchange="@(() => OnCheckboxChanged(context))" />
            </TemplateColumn>
            @* <PropertyColumn Property="@(p => p.Id)" Sortable="true" /> *@
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Frequency)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Measurement)" Sortable="false" />
            <PropertyColumn Property="@(p => p.Support)" Sortable="false" />
            <TemplateColumn Title="Status" Align="Align.Center">
                @if (context.Status == "Ongoing")
                {
                    <span class="ms-Icon ms-Icon--Accept"></span>
                }
                else if (context.Status == "Completed")
                {
                    <span class="ms-Icon ms-Icon--SkypeCircleCheck"></span>
                }
                else if (context.Status == "Not Started")
                {
                    <span class="ms-Icon ms-Icon--SkypeCircleClock"></span>
                }
            </TemplateColumn>

        </FluentDataGrid>
    </FluentGridItem>
</FluentGrid>


<p><strong>@message</strong></p>

@code {

    string message = string.Empty;

    record userGoal(int Id, string Name, string Frequency, string Measurement, string Support, string Status);

    IQueryable<userGoal> userGoals = new[]
    {
        new userGoal(1, "Increase daily physical activity", "Daily","10,000 steps","Access to standing desks and reminders","Ongoing"),
        new userGoal(2, "Improve sleep quality", "Daily","7 hours of sleep","Sleep hygiene tips, reduce screen time","Ongoing"),
        new userGoal(3, "Improve work and life balance", "Weekly","8AM-5PM work hours","Time management tools, productivity tips","Completed"),
        new userGoal(4, "Healthy eating habits", "Daily","3 fruit servings","Meal planning resources, healthy recipe","Not Started")
    }.AsQueryable();

    void OnCheckboxChanged(userGoal curr) {
        message = $"Checkbox for Goal Id {curr.Id} changed";
    }

    private async Task OpenDialogAsync()
    {
        var text = string.Empty;
        var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
        <FluentTextField @bind-Value=text Label="Name:" />
        <FluentTextField @bind-Value=text Label="Frequency:" />
        <FluentTextField @bind-Value=text Label="Measurement:" />
        <FluentTextField @bind-Value=text Label="Support:" />
        <FluentCombobox @bind-Value=text TOption="string" Label="Status:">
        <FluentOption Value="Ongoing">Ongoing</FluentOption>
            <FluentOption Value="Completed">Completed</FluentOption>
            <FluentOption Value="Not Started">Not Started</FluentOption>
        </FluentCombobox>
        </div>
    , new DialogParameters
    {
        Title = "New Goal Form",
    });

        var result = await dialogInstance.Result;
        if (!result.Cancelled)
        {
            await _dialogService.ShowSuccessAsync($"You entered: {text}", "Success");
        }
    }
}
