@page "/"
@page "/goals"
@using CorporateWellness.Components;
@using CorporateWellness.Models;
@using Microsoft.FluentUI.AspNetCore.Components
@inject IDialogService _dialogService
<FluentDialogProvider @rendermode="RenderMode.InteractiveServer" />


<FluentGrid Style="background-color: var(--neutral-layer-3); padding: 4px; ">
    <FluentGridItem xs="12" Justify="JustifyContent.FlexEnd">
        <FluentSearch AriaLabel="Search" />
        &nbsp;
        <FluentButton OnClick="@OpenDialogAsync">New Goal</FluentButton>
        &nbsp;
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())">Delete</FluentButton>
    </FluentGridItem>
    <FluentGridItem xs="12">
        <FluentDataGrid Items="@FilteredUserGoals">
            <TemplateColumn Width="30px" Align="Align.Center">
                <input type="checkbox" @onchange="@(() => OnCheckboxChanged(context))" />
            </TemplateColumn>
            @* <PropertyColumn Property="@(p => p.Id)" Sortable="true" /> *@
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Frequency)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Measurement)" Sortable="false" />
            <PropertyColumn Property="@(p => p.Support)" Sortable="false" />
            <TemplateColumn Title="Status" Align="Align.Center">
                @if (context.Status == "Ongoing")
                {
                    <span class="ms-Icon ms-Icon--Accept"></span>
                }
                else if (context.Status == "Completed")
                {
                    <span class="ms-Icon ms-Icon--SkypeCircleCheck"></span>
                }
                else if (context.Status == "Not Started")
                {
                    <span class="ms-Icon ms-Icon--SkypeCircleClock"></span>
                }
            </TemplateColumn>

        </FluentDataGrid>
    </FluentGridItem>
</FluentGrid>


<p><strong>@message</strong></p>

@code {

    string message = string.Empty;

    List<UserGoal> userGoals = new List<UserGoal>{

        new UserGoal(1, "Increase daily physical activity", "Daily","10,000 steps","Access to standing desks and reminders","Ongoing"),
        new UserGoal(2, "Improve sleep quality", "Daily","7 hours of sleep","Sleep hygiene tips, reduce screen time","Ongoing"),
        new UserGoal(3, "Improve work and life balance", "Weekly","8AM-5PM work hours","Time management tools, productivity tips","Completed"),
        new UserGoal(4, "Healthy eating habits", "Daily","3 fruit servings","Meal planning resources, healthy recipe","Not Started")
   };

    IQueryable<UserGoal> FilteredUserGoals => userGoals.AsQueryable();


    void OnCheckboxChanged(UserGoal curr) {
        message = $"Checkbox for Goal Id {curr.Id} changed";
    }

    private async Task OpenDialogAsync()
    {
        var newGoal = new UserGoal();

        var dialogInstance = await _dialogService.ShowDialogAsync(@<div>
        <FluentTextField style="width: 100%;" @bind-Value=newGoal.Name Label="Name:" /><br>
        <FluentTextField @bind-Value=newGoal.Frequency Label="Frequency:" /><br>
        <FluentTextField @bind-Value=newGoal.Measurement Label="Measurement:" /><br>
        <FluentTextArea style="width: 100%;" @bind-Value=newGoal.Support Label="Support:" /><br>
        <FluentCombobox @bind-Value=newGoal.Status TOption="string" Label="Status:">
            <FluentOption Value="Ongoing">Ongoing</FluentOption>
            <FluentOption Value="Completed">Completed</FluentOption>
            <FluentOption Selected="true" Value="Not Started">Not Started</FluentOption>
        </FluentCombobox>
        </div>
    , new DialogParameters
    {
        Title = "New Goal Form",
    });

        var result = await dialogInstance.Result;
        if (!result.Cancelled)
        {
            newGoal.Id = userGoals.Count + 1; // Simple ID generation
            userGoals.Add(newGoal);
            StateHasChanged();

            await _dialogService.ShowSuccessAsync($"You add a new goal!", "Success");
        }
    }
}
